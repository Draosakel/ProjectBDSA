@page "/fetchdata"
@inject HttpClient Http

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<div class="col-md-6 col-lg-4 p-3">
    <RadzenCard>
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Enter User/Reponame</RadzenText>
        <RadzenTextBox Change=@(args => OnChange(args, "TextBox")) Class="w-100" />
    </RadzenCard>
    <RadzenButton Text=@text Click=@OnButtonClick />
</div>

<div>
@if (authors != null) {
    @foreach (var a in authors)
    {
        <div @key="a">@a.AuthorId</div>
        <ul>
            @foreach (var c in a.AuthorCommits) {
                <li>@c.commitDate : @c.totalCommits</li>
            }
        </ul>
    }
} 
</div>

@if (datalists != null) {
<div class="container">
        <div class="row">
            <div class="col-sm-12 my-5">
                <RadzenCard Class="w-100 mb-4" Style="display: flex; align-items: center; gap: 0.5rem" >
                    <RadzenCheckBox @bind-Value="@smooth" Name="smooth"></RadzenCheckBox>
                    <RadzenLabel Text="Smooth" For="smooth" Style="margin-right: 1rem;"/>
                    <RadzenCheckBox @bind-Value="@showDataLabels" Name="dataLabels"></RadzenCheckBox>
                    <RadzenLabel Text="Show Data Labels" For="dataLabels" />
                </RadzenCard>
                <RadzenChart>

                    @foreach (var datalist in datalists) {
                    <RadzenLineSeries Smooth="@smooth" Data="@datalist.ToArray()" CategoryProperty="Date" Title="testname" LineType="LineType.Dashed" ValueProperty="Revenue">
                        <RadzenMarkers MarkerType="MarkerType.Square" />
                        <RadzenSeriesDataLabels Visible="@showDataLabels" />
                    </RadzenLineSeries>
                    }

                    <RadzenCategoryAxis Padding="20" Formatter="@FormatAsMonth" />
                    <RadzenValueAxis Formatter="@FormatAsUSD">
                        <RadzenGridLines Visible="true" />
                        <RadzenAxisTitle Text="Revenue in USD" />
                    </RadzenValueAxis>
                </RadzenChart>
            </div>
        </div>
    </div>
}

@code {

    Author[] authors = null;

    string path;
    string text = "Analyse";

    void OnChange(string value, string name)
    {
        path = "http://localhost:5258/downloadrepos/" + value;
    }
    async void OnButtonClick()
    {
        var forecasts = await Http.GetFromJsonAsync<Author[]>(path);
        authors = forecasts;
        formatAuthors();
        StateHasChanged();

        Console.WriteLine(forecasts);
        foreach (var i in forecasts) {
            Console.WriteLine(i.AuthorId);
        }
        
    }

    public class Author {
        public string AuthorId { get; set; }
        public List<Commit> AuthorCommits { get; set; }
    }

    public class Commit {
        public int totalCommits { get; set; }
        public string commitDate { get; set; }
    }


    List<List<DataItem>> datalists = new List<List<DataItem>>();

        public void formatAuthors() {
            foreach (var a in authors) {
            var dataitems = new List<DataItem>();
            foreach (var c in a.AuthorCommits) {
                dataitems.Add(new DataItem() { Date = c.commitDate, Revenue = c.totalCommits });
            }
            datalists.Add(dataitems);
        }
    } 

    class DataItem
        {
            public string Date { get; set; }
            public double Revenue { get; set; }
        }

    
        bool smooth = false;
        bool showDataLabels = false;

        

        string FormatAsUSD(object value)
        {
            return ((double)value).ToString("C0", CultureInfo.CreateSpecificCulture("en-US"));
        }

        string FormatAsMonth(object value)
        {
            if (value != null)
            {
                return Convert.ToDateTime(value).ToString("MMM");
            }

            return string.Empty;
        }
}